name: iOS CI/CD

on:
  push:
    branches:
      - DEV-IOS

jobs:
  build_ios:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        
      - name: Build
        uses: docker://sonarsource/sonar-scanner-cli:latest
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}    
        with:
          args: >
            -Dsonar.projectKey=pfin-mobile-super-app
            -Dsonar.sources=.

      - name: Import certificates (iOS)
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.IOS_P_12_ENT }}
          P12_PASSWORD: ${{ secrets.IOS_P_12_ih_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_PROVISION_STAGE }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n $BUILD_CERTIFICATE_BASE64 | base64 --decode --output $CERTIFICATE_PATH
          echo -n $BUILD_PROVISION_PROFILE_BASE64 | base64 --decode --output $PP_PATH

          # create a temporary keychain
          security create-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P $P12_PASSWORD -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychains -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

  deploy:
    - name: iOS App
      runs-on: macos-latest
      steps:
        - name: Build and Archive iOS App
          run: xcodebuild -scheme "Actions Productions" clean archive -archivePath "Actions" -configuration "Release Production"

        - name: Export IPA
          env:
            EXPORT_PLIST: ${{ secrets.IOS_EXPORT_PRODUCTIONS }}
          run: |
            # create export options
            EXPORT_PLIST_PATH=$RUNNER_TEMP/ExportOptions.plist
            echo -n $EXPORT_PLIST | base64 --decode --output $EXPORT_PLIST_PATH
            xcodebuild -exportArchive -archivePath $GITHUB_WORKSPACE/Actions.xcarchive -exportOptionsPlist $EXPORT_PLIST_PATH -exportPath $RUNNER_TEMP/export

        - name: Upload IPA
          uses: actions/upload-artifact@v2
          with:
            name: ios-artifact
            path: $RUNNER_TEMP/export

        - name: Rename the file, remove whitespace
          run: |
            echo Export directory contents:
            ls $RUNNER_TEMP/export/
            mv "$RUNNER_TEMP/export/Actions Productions.ipa" "$RUNNER_TEMP/export/ActionsProductions.ipa"
            ls $RUNNER_TEMP/export/

        - name: Decode auth, API key file, and save it
          env:
            API_KEY_BASE64: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
          run: |
            mkdir -p ~/private_keys
            echo -n $API_KEY_BASE64 | base64 --decode > ~/private_keys/AuthKey_${{ secrets.APPSTORE_API_KEY_ID }}.p8
            echo "After saving"
            ls ~/private_keys

        - name: Upload file to TestFlight using CLI
          run: |
            echo "Starting upload."
            ls ~/private_keys
            xcrun altool --validate-app -f $RUNNER_TEMP/export/ActionsProductions.ipa -t ios --apiKey ${{ secrets.APPSTORE_API_KEY_ID }}
            xcrun altool --upload-app -f $RUNNER_TEMP/export/ActionsProductions.ipa -t ios --apiKey ${{ secrets.APPSTORE_API_KEY_ID }}
